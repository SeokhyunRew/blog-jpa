plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.3'
	id 'io.spring.dependency-management' version '1.1.4'
	//sonarqube
	id "org.sonarqube" version "5.0.0.4638"
	id 'jacoco'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity6'
	// 2024. 03.21 기준 최신 버전, swagger
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.4.0'
	implementation 'mysql:mysql-connector-java:8.0.33'

	compileOnly 'org.projectlombok:lombok'

	runtimeOnly 'com.h2database:h2'

	annotationProcessor 'org.projectlombok:lombok'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testImplementation 'org.junit.jupiter:junit-jupiter:5.8.1'

}

tasks.named('test') {
	useJUnitPlatform()
	finalizedBy jacocoTestReport
}

jacocoTestReport {
	dependsOn test
	reports {
		xml.required = true
	}
}

sonarqube {
	properties {
		property "sonar.host.url", "http://localhost:9000"
		property "sonar.token", "sqp_ef4a899328d02e312f5c0f64bd07644d14e8d114"
		property "sonar.projectKey", "my_project"
		property "sonar.sources", "src"
		property "sonar.language", "java"
		property "sonar.sourceEncoding", "UTF-8"
		property "sonar.test.inclusions", "**/*Test.java"
		property 'sonar.exclusions', '**/test/**, **/resources/**, **/*Application.java'
		property 'sonar.coverage.jacoco.xmlReportPaths', layout.buildDirectory.dir("reports/jacoco/test/jacocoTestReport.xml").get().asFile
	}
}
